// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length && keys.every((Object? key) =>
        (b as Map<Object?, Object?>).containsKey(key) &&
        _deepEquals(a[key], b[key]));
  }
  return a == b;
}
    

/// Must be same as in platform interface package
enum AndroidManifestPermissionDto {
  accessCheckinProperties,
  accessLocationExtraCommands,
  accessNetworkState,
  accessNotificationPolicy,
  accessWifiState,
  accountManager,
  batteryStats,
  bindAccessibilityService,
  bindAppwidget,
  bindCarrierServices,
  bindConditionProviderService,
  bindDeviceAdmin,
  bindDreamService,
  bindIncallService,
  bindInputMethod,
  bindMidiDeviceService,
  bindNfcService,
  bindNotificationListenerService,
  bindPrintService,
  bindQuickSettingsTile,
  bindRemoteviews,
  bindScreeningService,
  bindTelecomConnectionService,
  bindTextService,
  bindTvInput,
  bindVoiceInteraction,
  bindVpnService,
  bindVrListenerService,
  bindWallpaper,
  bluetooth,
  bluetoothAdmin,
  bluetoothPrivileged,
  broadcastPackageRemoved,
  broadcastSms,
  broadcastSticky,
  broadcastWapPush,
  callPrivileged,
  captureAudioOutput,
  changeComponentEnabledState,
  changeConfiguration,
  changeNetworkState,
  changeWifiMulticastState,
  changeWifiState,
  clearAppCache,
  configureWifiDisplay,
  controlLocationUpdates,
  deleteCacheFiles,
  deletePackages,
  diagnostic,
  disableKeyguard,
  dump,
  expandStatusBar,
  factoryTest,
  getAccountsPrivileged,
  getPackageSize,
  globalSearch,
  installLocationProvider,
  installPackages,
  internet,
  killBackgroundProcesses,
  locationHardware,
  manageDocuments,
  masterClear,
  mediaContentControl,
  modifyAudioSettings,
  modifyPhoneState,
  mountFormatFilesystems,
  mountUnmountFilesystems,
  nfc,
  overrideWifiConfig,
  packageUsageStats,
  readLogs,
  readPrecisePhoneState,
  readSyncSettings,
  readSyncStats,
  reboot,
  receiveBootCompleted,
  reorderTasks,
  requestIgnoreBatteryOptimizations,
  requestInstallPackages,
  sendRespondViaMessage,
  setAlwaysFinish,
  setAnimationScale,
  setDebugApp,
  setProcessLimit,
  setTime,
  setTimeZone,
  setWallpaper,
  setWallpaperHints,
  signalPersistentProcesses,
  statusBar,
  systemAlertWindow,
  transmitIr,
  updateDeviceStats,
  vibrate,
  wakeLock,
  writeApnSettings,
  writeGservices,
  writeSecureSettings,
  writeSettings,
  writeSyncSettings,
}

class IconSize {
  IconSize({
    required this.width,
    required this.height,
  });

  int width;

  int height;

  List<Object?> _toList() {
    return <Object?>[
      width,
      height,
    ];
  }

  Object encode() {
    return _toList();  }

  static IconSize decode(Object result) {
    result as List<Object?>;
    return IconSize(
      width: result[0]! as int,
      height: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IconSize || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      width == other.width
      && height == other.height;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class GetInstalledApplicationsPlatformOptionsDto {
}

class GetInstalledApplicationsAndroidOptionsDto extends GetInstalledApplicationsPlatformOptionsDto {
  GetInstalledApplicationsAndroidOptionsDto({
    this.flag = 0,
  });

  int flag;

  List<Object?> _toList() {
    return <Object?>[
      flag,
    ];
  }

  Object encode() {
    return _toList();  }

  static GetInstalledApplicationsAndroidOptionsDto decode(Object result) {
    result as List<Object?>;
    return GetInstalledApplicationsAndroidOptionsDto(
      flag: result[0]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GetInstalledApplicationsAndroidOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      flag == other.flag;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

sealed class ApplicationInfoDto {
}

class AndroidApplicationInfoDto extends ApplicationInfoDto {
  AndroidApplicationInfoDto({
    required this.packageName,
    required this.maybeSystem,
    this.iconId,
    this.name,
    this.label,
    required this.enabled,
    required this.flags,
    this.category,
    required this.processName,
    required this.uid,
    required this.permissions,
  });

  String packageName;

  bool maybeSystem;

  String? iconId;

  String? name;

  String? label;

  bool enabled;

  int flags;

  int? category;

  String processName;

  int uid;

  List<AndroidManifestPermissionDto> permissions;

  List<Object?> _toList() {
    return <Object?>[
      packageName,
      maybeSystem,
      iconId,
      name,
      label,
      enabled,
      flags,
      category,
      processName,
      uid,
      permissions,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidApplicationInfoDto decode(Object result) {
    result as List<Object?>;
    return AndroidApplicationInfoDto(
      packageName: result[0]! as String,
      maybeSystem: result[1]! as bool,
      iconId: result[2] as String?,
      name: result[3] as String?,
      label: result[4] as String?,
      enabled: result[5]! as bool,
      flags: result[6]! as int,
      category: result[7] as int?,
      processName: result[8]! as String,
      uid: result[9]! as int,
      permissions: (result[10] as List<Object?>?)!.cast<AndroidManifestPermissionDto>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidApplicationInfoDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return 
      packageName == other.packageName
      && maybeSystem == other.maybeSystem
      && iconId == other.iconId
      && name == other.name
      && label == other.label
      && enabled == other.enabled
      && flags == other.flags
      && category == other.category
      && processName == other.processName
      && uid == other.uid
      && _deepEquals(permissions, other.permissions);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is AndroidManifestPermissionDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is IconSize) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is GetInstalledApplicationsAndroidOptionsDto) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidApplicationInfoDto) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AndroidManifestPermissionDto.values[value];
      case 130: 
        return IconSize.decode(readValue(buffer)!);
      case 131: 
        return GetInstalledApplicationsAndroidOptionsDto.decode(readValue(buffer)!);
      case 132: 
        return AndroidApplicationInfoDto.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class InstalledAppsPigeon {
  /// Constructor for [InstalledAppsPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  InstalledAppsPigeon({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<List<ApplicationInfoDto>> getInstalledApplications({GetInstalledApplicationsPlatformOptionsDto? options}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.installed_apps.InstalledAppsPigeon.getInstalledApplications$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[options]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<ApplicationInfoDto>();
    }
  }

  Future<Uint8List?> getIcon(String iconId, {int? quality, IconSize? size, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.installed_apps.InstalledAppsPigeon.getIcon$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[iconId, quality, size]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as Uint8List?);
    }
  }
}
